// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int       @id @default(autoincrement()) @map("id")
  email     String    @unique @map("email")
  password  String    @map("password")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")

  userInfos UserInfos? // 사용자(Users) 테이블과 사용자 정보(UserInfos) 테이블이 1:1 관계를 맺습니다.
  resumes   Resumes[]  // 사용자(Users) 테이블과 이력서(Resumes) 테이블이 1:N 관계를 맺습니다.

  @@map("Users")
}

model Resumes {
  resumeId     Int      @id @default(autoincrement()) @map("resumeId")
  userId       Int      @map("userId") // Users 테이블을 참조하는 외래키
  title        String   @map("title")
  introduction String   @map("introduction") @db.Text
  status       String   @default("APPLY") @map("status")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Resumes")
}

model UserInfos {
  userInfoId   Int      @id @default(autoincrement()) @map("userInfoId")
  userId       Int      @unique @map("userId") // Users 테이블을 참조하는 외래키
  name         String   @map("name")
  role         String   @map("role")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserInfos")
}